{
  "address": "0x5c53b60368E0b184bbba2Db40f56C57Bc8a1d1ef",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vibra",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Dispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Payment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "confirmDelivery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum Escrow.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeeeffdc106f8f958c42972c129606ff4be85e8479ccda68caee4c6b7fe1fe99d",
  "receipt": {
    "to": null,
    "from": "0xECFeDE31E564C97Ab05ABE88786dFb2A642f69f2",
    "contractAddress": "0x5c53b60368E0b184bbba2Db40f56C57Bc8a1d1ef",
    "transactionIndex": 1,
    "gasUsed": "1218425",
    "logsBloom": "0x
    "blockHash": "0xde0cc39efaefdb9350d6b3b3ebb45986ec2f4689eaa68f926fb5ad346d9c2296",
    "transactionHash": "0xeeeffdc106f8f958c42972c129606ff4be85e8479ccda68caee4c6b7fe1fe99d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7701325,
        "transactionHash": "0xeeeffdc106f8f958c42972c129606ff4be85e8479ccda68caee4c6b7fe1fe99d",
        "address": "0x5c53b60368E0b184bbba2Db40f56C57Bc8a1d1ef",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ecfede31e564c97ab05abe88786dfb2a642f69f2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xde0cc39efaefdb9350d6b3b3ebb45986ec2f4689eaa68f926fb5ad346d9c2296"
      }
    ],
    "blockNumber": 7701325,
    "cumulativeGasUsed": "1239425",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB1A930fA68E4093E2BE6396D83e249bDB4b2ef6E",
    "100000000000000000",
    "0x6869674A3E032B0678bb1bcaD681A0fe375F8BBf",
    "0x20f3c530aeD28d26cE5AE6d5d7E9b1DF249b5e0D"
  ],
  "numDeployments": 1,
  "solcInputHash": "f53c90250c3b30a19add36b2c12c0451",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vibra\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmDelivery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Escrow.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Vibra.sol\\\";\\n\\ncontract Escrow is Ownable {\\n    State public state;\\n    VibraToken internal vibra;\\n    uint256 internal value;\\n    address public buyer;\\n    address public seller;\\n\\n    enum State {\\n        AWAITING_PAYMENT,\\n        AWAITING_DELIVERY,\\n        DISPUTED,\\n        CANCELED,\\n        COMPLETE\\n    }\\n\\n    modifier onlyBuyer() {\\n        require(msg.sender == buyer, \\\"Only the buyer can call this function\\\");\\n        _;\\n    }\\n\\n    event Deposit(address indexed from, uint256 value);\\n    event Payment(address indexed to, uint256 value);\\n    event Refund(address to, uint256 value);\\n    event Dispute(address indexed buyer, address indexed seller, uint256 value);\\n\\n    constructor(\\n        address _vibra,\\n        uint256 _value,\\n        address _buyer,\\n        address _seller\\n    ) {\\n        vibra = VibraToken(_vibra);\\n        value = _value;\\n        buyer = _buyer;\\n        seller = _seller;\\n    }\\n\\n    function deposit(uint256 _amount) external onlyBuyer {\\n        require(\\n            state == State.AWAITING_PAYMENT,\\n            \\\"A deposit was already completed\\\"\\n        );\\n        require(_amount == value, \\\"Incorrect deposit amount\\\");\\n\\n        vibra.transferFrom(msg.sender, address(this), _amount);\\n        state = State.AWAITING_DELIVERY;\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    function confirmDelivery() public onlyBuyer {\\n        require(\\n            state == State.AWAITING_DELIVERY,\\n            \\\"Must be in awaiting delivery state\\\"\\n        );\\n\\n        vibra.transfer(seller, value);\\n        state = State.COMPLETE;\\n\\n        emit Payment(seller, value);\\n    }\\n\\n    function dispute() public onlyBuyer {\\n        require(\\n            state == State.AWAITING_DELIVERY,\\n            \\\"Must be in awaiting delivery state\\\"\\n        );\\n        state = State.DISPUTED;\\n\\n        emit Dispute(buyer, seller, value);\\n    }\\n\\n    function processRefund() public onlyOwner {\\n        require(state == State.DISPUTED, \\\"Must be in disputed state\\\");\\n\\n        vibra.transfer(buyer, value);\\n        emit Refund(buyer, value);\\n\\n        state = State.CANCELED;\\n        value = 0;\\n    }\\n}\",\"keccak256\":\"0xb6e0dc56a0f30f16d78dc7062c9615f9f81c3300a74bc3e9d02125aae84badd2\",\"license\":\"MIT\"},\"contracts/Vibra.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract VibraToken is ERC20 {\\n  constructor(uint256 initialSupply) ERC20(\\\"Vibra\\\", \\\"VBRA\\\") {\\n    _mint(msg.sender, initialSupply);\\n  }\\n}\",\"keccak256\":\"0x2e1877598c0dda62bb878673406f98da8455b6ea889900d9110b9e193b51a13d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620016013803806200160183398181016040528101906200003791906200029c565b620000576200004b6200012b60201b60201c565b6200013360201b60201c565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200030e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022982620001fc565b9050919050565b6200023b816200021c565b81146200024757600080fd5b50565b6000815190506200025b8162000230565b92915050565b6000819050919050565b620002768162000261565b81146200028257600080fd5b50565b60008151905062000296816200026b565b92915050565b60008060008060808587031215620002b957620002b8620001f7565b5b6000620002c9878288016200024a565b9450506020620002dc8782880162000285565b9350506040620002ef878288016200024a565b925050606062000302878288016200024a565b91505092959194509250565b6112e3806200031e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b6b55f2511610066578063b6b55f2514610111578063c19d93fb1461012d578063dae805211461014b578063f240f7c314610155578063f2fde38b1461015f5761009e565b806308551a53146100a35780635e10177b146100c1578063715018a6146100cb5780637150d8ae146100d55780638da5cb5b146100f3575b600080fd5b6100ab61017b565b6040516100b89190610cd9565b60405180910390f35b6100c96101a1565b005b6100d361041a565b005b6100dd61042e565b6040516100ea9190610cd9565b60405180910390f35b6100fb610454565b6040516101089190610cd9565b60405180910390f35b61012b60048036038101906101269190610d2f565b61047d565b005b6101356106f5565b6040516101429190610dd3565b60405180910390f35b610153610708565b005b61015d6108ec565b005b61017960048036038101906101749190610e1a565b610aca565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610eca565b60405180910390fd5b6001600481111561024557610244610d5c565b5b600060149054906101000a900460ff16600481111561026757610266610d5c565b5b146102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e90610f5c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518363ffffffff1660e01b8152600401610328929190610f8b565b602060405180830381600087803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a9190610fec565b506004600060146101000a81548160ff021916908360048111156103a1576103a0610d5c565b5b0217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4f43975feb89f48dd30cabbb32011045be187d1e11c8ea9faa43efc352825196002546040516104109190611019565b60405180910390a2565b610422610b4e565b61042c6000610bcc565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610eca565b60405180910390fd5b6000600481111561052157610520610d5c565b5b600060149054906101000a900460ff16600481111561054357610542610d5c565b5b14610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90611080565b60405180910390fd5b60025481146105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be906110ec565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016106269392919061110c565b602060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190610fec565b506001600060146101000a81548160ff0219169083600481111561069f5761069e610d5c565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c826040516106ea9190611019565b60405180910390a250565b600060149054906101000a900460ff1681565b610710610b4e565b6002600481111561072457610723610d5c565b5b600060149054906101000a900460ff16600481111561074657610745610d5c565b5b14610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077d9061118f565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518363ffffffff1660e01b8152600401610807929190610f8b565b602060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108599190610fec565b507fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040516108af929190610f8b565b60405180910390a16003600060146101000a81548160ff021916908360048111156108dd576108dc610d5c565b5b02179055506000600281905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390610eca565b60405180910390fd5b600160048111156109905761098f610d5c565b5b600060149054906101000a900460ff1660048111156109b2576109b1610d5c565b5b146109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990610f5c565b60405180910390fd5b6002600060146101000a81548160ff02191690836004811115610a1857610a17610d5c565b5b0217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3039bbbb290ea05336bd9acec0c89358030c0e7e00469f4003c81e5e7c8f6761600254604051610ac09190611019565b60405180910390a3565b610ad2610b4e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3990611221565b60405180910390fd5b610b4b81610bcc565b50565b610b56610c90565b73ffffffffffffffffffffffffffffffffffffffff16610b74610454565b73ffffffffffffffffffffffffffffffffffffffff1614610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc19061128d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cc382610c98565b9050919050565b610cd381610cb8565b82525050565b6000602082019050610cee6000830184610cca565b92915050565b600080fd5b6000819050919050565b610d0c81610cf9565b8114610d1757600080fd5b50565b600081359050610d2981610d03565b92915050565b600060208284031215610d4557610d44610cf4565b5b6000610d5384828501610d1a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110610d9c57610d9b610d5c565b5b50565b6000819050610dad82610d8b565b919050565b6000610dbd82610d9f565b9050919050565b610dcd81610db2565b82525050565b6000602082019050610de86000830184610dc4565b92915050565b610df781610cb8565b8114610e0257600080fd5b50565b600081359050610e1481610dee565b92915050565b600060208284031215610e3057610e2f610cf4565b5b6000610e3e84828501610e05565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79207468652062757965722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000610eb4602583610e47565b9150610ebf82610e58565b604082019050919050565b60006020820190508181036000830152610ee381610ea7565b9050919050565b7f4d75737420626520696e206177616974696e672064656c69766572792073746160008201527f7465000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f46602283610e47565b9150610f5182610eea565b604082019050919050565b60006020820190508181036000830152610f7581610f39565b9050919050565b610f8581610cf9565b82525050565b6000604082019050610fa06000830185610cca565b610fad6020830184610f7c565b9392505050565b60008115159050919050565b610fc981610fb4565b8114610fd457600080fd5b50565b600081519050610fe681610fc0565b92915050565b60006020828403121561100257611001610cf4565b5b600061101084828501610fd7565b91505092915050565b600060208201905061102e6000830184610f7c565b92915050565b7f41206465706f7369742077617320616c726561647920636f6d706c6574656400600082015250565b600061106a601f83610e47565b915061107582611034565b602082019050919050565b600060208201905081810360008301526110998161105d565b9050919050565b7f496e636f7272656374206465706f73697420616d6f756e740000000000000000600082015250565b60006110d6601883610e47565b91506110e1826110a0565b602082019050919050565b60006020820190508181036000830152611105816110c9565b9050919050565b60006060820190506111216000830186610cca565b61112e6020830185610cca565b61113b6040830184610f7c565b949350505050565b7f4d75737420626520696e20646973707574656420737461746500000000000000600082015250565b6000611179601983610e47565b915061118482611143565b602082019050919050565b600060208201905081810360008301526111a88161116c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061120b602683610e47565b9150611216826111af565b604082019050919050565b6000602082019050818103600083015261123a816111fe565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611277602083610e47565b915061128282611241565b602082019050919050565b600060208201905081810360008301526112a68161126a565b905091905056fea26469706673582212208a16de7dfcd29cf2fab4d1e861bc2d63eaa6cbf56b091d4d0f7d8f6807d4bfd064736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b6b55f2511610066578063b6b55f2514610111578063c19d93fb1461012d578063dae805211461014b578063f240f7c314610155578063f2fde38b1461015f5761009e565b806308551a53146100a35780635e10177b146100c1578063715018a6146100cb5780637150d8ae146100d55780638da5cb5b146100f3575b600080fd5b6100ab61017b565b6040516100b89190610cd9565b60405180910390f35b6100c96101a1565b005b6100d361041a565b005b6100dd61042e565b6040516100ea9190610cd9565b60405180910390f35b6100fb610454565b6040516101089190610cd9565b60405180910390f35b61012b60048036038101906101269190610d2f565b61047d565b005b6101356106f5565b6040516101429190610dd3565b60405180910390f35b610153610708565b005b61015d6108ec565b005b61017960048036038101906101749190610e1a565b610aca565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610eca565b60405180910390fd5b6001600481111561024557610244610d5c565b5b600060149054906101000a900460ff16600481111561026757610266610d5c565b5b146102a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029e90610f5c565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518363ffffffff1660e01b8152600401610328929190610f8b565b602060405180830381600087803b15801561034257600080fd5b505af1158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a9190610fec565b506004600060146101000a81548160ff021916908360048111156103a1576103a0610d5c565b5b0217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4f43975feb89f48dd30cabbb32011045be187d1e11c8ea9faa43efc352825196002546040516104109190611019565b60405180910390a2565b610422610b4e565b61042c6000610bcc565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461050d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050490610eca565b60405180910390fd5b6000600481111561052157610520610d5c565b5b600060149054906101000a900460ff16600481111561054357610542610d5c565b5b14610583576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057a90611080565b60405180910390fd5b60025481146105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be906110ec565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016106269392919061110c565b602060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190610fec565b506001600060146101000a81548160ff0219169083600481111561069f5761069e610d5c565b5b02179055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c826040516106ea9190611019565b60405180910390a250565b600060149054906101000a900460ff1681565b610710610b4e565b6002600481111561072457610723610d5c565b5b600060149054906101000a900460ff16600481111561074657610745610d5c565b5b14610786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077d9061118f565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518363ffffffff1660e01b8152600401610807929190610f8b565b602060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108599190610fec565b507fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040516108af929190610f8b565b60405180910390a16003600060146101000a81548160ff021916908360048111156108dd576108dc610d5c565b5b02179055506000600281905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390610eca565b60405180910390fd5b600160048111156109905761098f610d5c565b5b600060149054906101000a900460ff1660048111156109b2576109b1610d5c565b5b146109f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e990610f5c565b60405180910390fd5b6002600060146101000a81548160ff02191690836004811115610a1857610a17610d5c565b5b0217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3039bbbb290ea05336bd9acec0c89358030c0e7e00469f4003c81e5e7c8f6761600254604051610ac09190611019565b60405180910390a3565b610ad2610b4e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3990611221565b60405180910390fd5b610b4b81610bcc565b50565b610b56610c90565b73ffffffffffffffffffffffffffffffffffffffff16610b74610454565b73ffffffffffffffffffffffffffffffffffffffff1614610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc19061128d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cc382610c98565b9050919050565b610cd381610cb8565b82525050565b6000602082019050610cee6000830184610cca565b92915050565b600080fd5b6000819050919050565b610d0c81610cf9565b8114610d1757600080fd5b50565b600081359050610d2981610d03565b92915050565b600060208284031215610d4557610d44610cf4565b5b6000610d5384828501610d1a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60058110610d9c57610d9b610d5c565b5b50565b6000819050610dad82610d8b565b919050565b6000610dbd82610d9f565b9050919050565b610dcd81610db2565b82525050565b6000602082019050610de86000830184610dc4565b92915050565b610df781610cb8565b8114610e0257600080fd5b50565b600081359050610e1481610dee565b92915050565b600060208284031215610e3057610e2f610cf4565b5b6000610e3e84828501610e05565b91505092915050565b600082825260208201905092915050565b7f4f6e6c79207468652062757965722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000610eb4602583610e47565b9150610ebf82610e58565b604082019050919050565b60006020820190508181036000830152610ee381610ea7565b9050919050565b7f4d75737420626520696e206177616974696e672064656c69766572792073746160008201527f7465000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f46602283610e47565b9150610f5182610eea565b604082019050919050565b60006020820190508181036000830152610f7581610f39565b9050919050565b610f8581610cf9565b82525050565b6000604082019050610fa06000830185610cca565b610fad6020830184610f7c565b9392505050565b60008115159050919050565b610fc981610fb4565b8114610fd457600080fd5b50565b600081519050610fe681610fc0565b92915050565b60006020828403121561100257611001610cf4565b5b600061101084828501610fd7565b91505092915050565b600060208201905061102e6000830184610f7c565b92915050565b7f41206465706f7369742077617320616c726561647920636f6d706c6574656400600082015250565b600061106a601f83610e47565b915061107582611034565b602082019050919050565b600060208201905081810360008301526110998161105d565b9050919050565b7f496e636f7272656374206465706f73697420616d6f756e740000000000000000600082015250565b60006110d6601883610e47565b91506110e1826110a0565b602082019050919050565b60006020820190508181036000830152611105816110c9565b9050919050565b60006060820190506111216000830186610cca565b61112e6020830185610cca565b61113b6040830184610f7c565b949350505050565b7f4d75737420626520696e20646973707574656420737461746500000000000000600082015250565b6000611179601983610e47565b915061118482611143565b602082019050919050565b600060208201905081810360008301526111a88161116c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061120b602683610e47565b9150611216826111af565b604082019050919050565b6000602082019050818103600083015261123a816111fe565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611277602083610e47565b915061128282611241565b602082019050919050565b600060208201905081810360008301526112a68161126a565b905091905056fea26469706673582212208a16de7dfcd29cf2fab4d1e861bc2d63eaa6cbf56b091d4d0f7d8f6807d4bfd064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1009,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "state",
        "offset": 20,
        "slot": "0",
        "type": "t_enum(State)1024"
      },
      {
        "astId": 1012,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "vibra",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(VibraToken)1983"
      },
      {
        "astId": 1014,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "value",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1016,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "buyer",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1018,
        "contract": "contracts/Escrow.sol:Escrow",
        "label": "seller",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(VibraToken)1983": {
        "encoding": "inplace",
        "label": "contract VibraToken",
        "numberOfBytes": "20"
      },
      "t_enum(State)1024": {
        "encoding": "inplace",
        "label": "enum Escrow.State",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}